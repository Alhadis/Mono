.if !'\*(?#'' .nx
.
.\" Basic key/value hash structures in pure Roff.
.\" 
.\" Provides a means of storing values under names longer than 2 characters,
.\" but makes no assumptions about compatibility mode and/or implementation.
.
.\" Counter used when generating IDs automatically
.nr # 1
.
.\" Set register $3 to 1 if a key named $2 exists in $1
.\"
.\" Usage:
.\"    .?# [MAP-NAME] [KEY] [OUT-NR]
.\"
.\" Examples:
.\"    .?# COLOURS red HAVE-RED?
.\"    \n[HAVE-RED?] => 1
.de ?#
.	if !'\\$3'' .rr \\$3
..
.
.\" Set register $3 to 1 if $1 has an entry with a value of $2.
.\"
.\" Usage:
.\"    .#? [MAP-NAME] [VALUE] [OUT-NR]
.\"
.\" Examples:
.\"    .#? COLOURS "#ff0000" HAVE-RED?
.\"    \n[HAVE-RED?] => 1
.de #?
.	if !'\\$3'' .rr \\$3
..
.
.\" Retrieve an entry named $2 stored in $1.
.\"
.\" Usage:
.\"     .#< [MAP-NAME] [KEY] [OUT-STR]
.\"
.\" Example:
.\"     .#< COLOURS red HEX-CODE
.\"     \*[HEX-CODE] => "#ff0000"
.de #<
.	if !'\\$3'' .rm \\$3
..
.
.\" Store an entry in $1 named $2 with value $3.
.\"
.\" Usage:
.\"     .#> [MAP-NAME] [KEY] [VALUE]
.\"
.\" Example:
.\"     .#> COLOURS red "#ff0000"
.de #>
.	am ?# >>
.	if '\\\\$1'\\$1' .if '\\\\$2'\\$2' .nr \\\\$3 1
.	>>
.	am #? >>
.	if '\\\\$1'\\$1' .if '\\\\$2'\\$3' .nr \\\\$3 1
.	>>
.	am #< >>
.	if '\\\\$1'\\$1' .if '\\\\$2'\\$2' .ds \\\\$3 \\$3
.	>>
..
.
.\" Assign a unique identifier to $1
.\"
.\" Usage:
.\"     .#+ [VALUE] [ID] [OUT-STR]
.\"
.\" Clobbers:
.\"     \n($?
.de #+
.	#? ID "\\$2" $?
.
.	\" ID already exists
.	ie \\n($?=1 \{\
.		#? ID "\\$2-\\n(#" $?
.
.		\" Suffixed ID exists too; increment and try again
.		ie \\n($?=1 \{\
.			nr # \\n(#+1
.			#+ "\\$1" "\\$2"
.		\}
.
.		\" This suffix is free; use it
.		el \{\
.			#> ID "\\$1" "\\$2-\\n(#"
.			if !'\\$3'' .#< ID "\\$1" \\$3
.		\}
.	\}
.
.	\" ID not yet allocated; use it
.	el \{\
.		#> ID "\\$1" "\\$2"
.		if !'\\$3'' .#< ID "\\$1" \\$3
.	\}
.
.	\" Clean up
.	rr $?
..
